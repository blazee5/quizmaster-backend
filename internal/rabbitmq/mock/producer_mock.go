// Code generated by MockGen. DO NOT EDIT.
// Source: internal/rabbitmq/producer.go
//
// Generated by this command:
//
//	mockgen -source=internal/rabbitmq/producer.go -destination internal/rabbitmq/mock/producer_mock.go
//
// Package mock_rabbitmq is a generated GoMock package.
package mock_rabbitmq

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueueProducer is a mock of QueueProducer interface.
type MockQueueProducer struct {
	ctrl     *gomock.Controller
	recorder *MockQueueProducerMockRecorder
}

// MockQueueProducerMockRecorder is the mock recorder for MockQueueProducer.
type MockQueueProducerMockRecorder struct {
	mock *MockQueueProducer
}

// NewMockQueueProducer creates a new mock instance.
func NewMockQueueProducer(ctrl *gomock.Controller) *MockQueueProducer {
	mock := &MockQueueProducer{ctrl: ctrl}
	mock.recorder = &MockQueueProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueProducer) EXPECT() *MockQueueProducerMockRecorder {
	return m.recorder
}

// InitProducer mocks base method.
func (m *MockQueueProducer) InitProducer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitProducer")
}

// InitProducer indicates an expected call of InitProducer.
func (mr *MockQueueProducerMockRecorder) InitProducer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitProducer", reflect.TypeOf((*MockQueueProducer)(nil).InitProducer))
}

// PublishMessage mocks base method.
func (m *MockQueueProducer) PublishMessage(ctx context.Context, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessage", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMessage indicates an expected call of PublishMessage.
func (mr *MockQueueProducerMockRecorder) PublishMessage(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockQueueProducer)(nil).PublishMessage), ctx, msg)
}
