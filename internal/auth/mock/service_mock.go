// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/auth/service.go -destination internal/auth/mock/service_mock.go
//
// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	reflect "reflect"

	domain "github.com/blazee5/quizmaster-backend/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockService) GenerateToken(ctx context.Context, input domain.SignInRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockServiceMockRecorder) GenerateToken(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockService)(nil).GenerateToken), ctx, input)
}

// ResetEmail mocks base method.
func (m *MockService) ResetEmail(ctx context.Context, userID int, input domain.ResetEmailRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetEmail", ctx, userID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetEmail indicates an expected call of ResetEmail.
func (mr *MockServiceMockRecorder) ResetEmail(ctx, userID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetEmail", reflect.TypeOf((*MockService)(nil).ResetEmail), ctx, userID, input)
}

// ResetPassword mocks base method.
func (m *MockService) ResetPassword(ctx context.Context, input domain.ResetPasswordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockServiceMockRecorder) ResetPassword(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockService)(nil).ResetPassword), ctx, input)
}

// SendEmailCode mocks base method.
func (m *MockService) SendEmailCode(ctx context.Context, userID int, input domain.VerificationCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailCode", ctx, userID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailCode indicates an expected call of SendEmailCode.
func (mr *MockServiceMockRecorder) SendEmailCode(ctx, userID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailCode", reflect.TypeOf((*MockService)(nil).SendEmailCode), ctx, userID, input)
}

// SendPasswordCode mocks base method.
func (m *MockService) SendPasswordCode(ctx context.Context, input domain.VerificationCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPasswordCode", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPasswordCode indicates an expected call of SendPasswordCode.
func (mr *MockServiceMockRecorder) SendPasswordCode(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordCode", reflect.TypeOf((*MockService)(nil).SendPasswordCode), ctx, input)
}

// SignUp mocks base method.
func (m *MockService) SignUp(ctx context.Context, input domain.SignUpRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockServiceMockRecorder) SignUp(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockService)(nil).SignUp), ctx, input)
}
