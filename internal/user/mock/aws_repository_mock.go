// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/aws_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/user/aws_repository.go -destination internal/user/mock/aws_repository_mock.go
//
// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAWSRepository is a mock of AWSRepository interface.
type MockAWSRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAWSRepositoryMockRecorder
}

// MockAWSRepositoryMockRecorder is the mock recorder for MockAWSRepository.
type MockAWSRepositoryMockRecorder struct {
	mock *MockAWSRepository
}

// NewMockAWSRepository creates a new mock instance.
func NewMockAWSRepository(ctrl *gomock.Controller) *MockAWSRepository {
	mock := &MockAWSRepository{ctrl: ctrl}
	mock.recorder = &MockAWSRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSRepository) EXPECT() *MockAWSRepositoryMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockAWSRepository) DeleteFile(ctx context.Context, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockAWSRepositoryMockRecorder) DeleteFile(ctx, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockAWSRepository)(nil).DeleteFile), ctx, fileName)
}

// SaveFile mocks base method.
func (m *MockAWSRepository) SaveFile(ctx context.Context, fileName, contentType string, chunk []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", ctx, fileName, contentType, chunk)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockAWSRepositoryMockRecorder) SaveFile(ctx, fileName, contentType, chunk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockAWSRepository)(nil).SaveFile), ctx, fileName, contentType, chunk)
}
